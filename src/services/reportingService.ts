import { captureRef } from "react-native-view-shot";
import * as Sharing from "expo-sharing";
import * as FileSystem from "expo-file-system";
import { Project, ProjectEstimate, RiskAssessment } from "../types/construction";

export interface ReportData {
  project: Project;
  estimates: ProjectEstimate[];
  riskAssessments: RiskAssessment[];
  generatedAt: Date;
}

export class ReportingService {
  private static instance: ReportingService;

  public static getInstance(): ReportingService {
    if (!ReportingService.instance) {
      ReportingService.instance = new ReportingService();
    }
    return ReportingService.instance;
  }

  async generateProjectSummaryReport(data: ReportData): Promise<string> {
    const latestEstimate = data.estimates.length > 0 ? data.estimates[0] : null;
    const latestRiskAssessment = data.riskAssessments.length > 0 ? data.riskAssessments[0] : null;

    const reportContent = `
# 2CM SmartBuild Project Report

**Project:** ${data.project.name}
**Generated:** ${data.generatedAt.toLocaleDateString()}

## Project Overview
- **Type:** ${data.project.type.replace("_", " ").replace(/\b\w/g, l => l.toUpperCase())}
- **Location:** ${data.project.location}
- **Status:** ${data.project.status.replace("_", " ").toUpperCase()}
- **Start Date:** ${data.project.startDate.toLocaleDateString()}
- **Estimated End Date:** ${data.project.estimatedEndDate.toLocaleDateString()}

## Budget Summary
- **Total Budget:** $${data.project.budget.toLocaleString()}
- **Estimated Cost:** $${data.project.estimatedCost.toLocaleString()}
- **Actual Cost:** $${data.project.actualCost.toLocaleString()}
- **Budget Utilization:** ${((data.project.estimatedCost / data.project.budget) * 100).toFixed(1)}%

${latestEstimate ? `
## Latest Cost Estimate
- **Total Cost:** $${latestEstimate.totalCost.toLocaleString()}
- **Confidence Level:** ${latestEstimate.confidence}%
- **Method:** ${latestEstimate.method.replace("_", " ").replace(/\b\w/g, l => l.toUpperCase())}
- **Generated:** ${latestEstimate.createdAt.toLocaleDateString()}

### Cost Breakdown
- **Materials:** $${latestEstimate.materialCosts.reduce((sum, m) => sum + m.totalCost, 0).toLocaleString()}
- **Labor:** $${latestEstimate.laborCosts.reduce((sum, l) => sum + l.totalCost, 0).toLocaleString()}
- **Equipment:** $${latestEstimate.equipmentCosts.reduce((sum, e) => sum + e.totalCost, 0).toLocaleString()}
- **Overhead:** $${latestEstimate.overheadCosts.reduce((sum, o) => sum + o.amount, 0).toLocaleString()}
` : ""}

${latestRiskAssessment ? `
## Risk Assessment
- **Overall Risk Score:** ${latestRiskAssessment.overallRiskScore}/100
- **Risk Level:** ${latestRiskAssessment.overallRiskScore < 30 ? "Low" : latestRiskAssessment.overallRiskScore < 70 ? "Medium" : "High"}
- **Risks Identified:** ${latestRiskAssessment.risks.length}
- **Last Updated:** ${latestRiskAssessment.updatedAt.toLocaleDateString()}

### Top Risks
${latestRiskAssessment.risks
  .sort((a, b) => b.riskScore - a.riskScore)
  .slice(0, 5)
  .map((risk, index) => `${index + 1}. **${risk.category.replace("_", " ").toUpperCase()}** (Score: ${risk.riskScore})
   - ${risk.description}
   - Mitigation: ${risk.mitigation}`)
  .join("\n\n")}
` : ""}

## Project Timeline
- **Duration:** ${Math.ceil((data.project.estimatedEndDate.getTime() - data.project.startDate.getTime()) / (1000 * 60 * 60 * 24))} days
- **Progress:** ${data.project.status === "completed" ? "100%" : data.project.status === "in_progress" ? "In Progress" : "Not Started"}

---
*Report generated by 2CM SmartBuild AI-powered construction planning system*
`;

    return reportContent;
  }

  async generateCostAnalysisReport(data: ReportData): Promise<string> {
    const estimates = data.estimates.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());
    
    const reportContent = `
# Cost Analysis Report

**Project:** ${data.project.name}
**Generated:** ${data.generatedAt.toLocaleDateString()}

## Cost Evolution
${estimates.map((estimate, index) => `
### Estimate ${index + 1} - ${estimate.createdAt.toLocaleDateString()}
- **Total Cost:** $${estimate.totalCost.toLocaleString()}
- **Confidence:** ${estimate.confidence}%
- **Method:** ${estimate.method.replace("_", " ").replace(/\b\w/g, l => l.toUpperCase())}
`).join("")}

## Budget vs Estimates Comparison
- **Original Budget:** $${data.project.budget.toLocaleString()}
- **Latest Estimate:** $${estimates.length > 0 ? estimates[0].totalCost.toLocaleString() : "N/A"}
- **Variance:** ${estimates.length > 0 ? ((estimates[0].totalCost - data.project.budget) / data.project.budget * 100).toFixed(1) + "%" : "N/A"}

${estimates.length > 0 ? `
## Detailed Cost Breakdown (Latest Estimate)
- **Materials:** $${estimates[0].materialCosts.reduce((sum, m) => sum + m.totalCost, 0).toLocaleString()} (${((estimates[0].materialCosts.reduce((sum, m) => sum + m.totalCost, 0) / estimates[0].totalCost) * 100).toFixed(1)}%)
- **Labor:** $${estimates[0].laborCosts.reduce((sum, l) => sum + l.totalCost, 0).toLocaleString()} (${((estimates[0].laborCosts.reduce((sum, l) => sum + l.totalCost, 0) / estimates[0].totalCost) * 100).toFixed(1)}%)
- **Equipment:** $${estimates[0].equipmentCosts.reduce((sum, e) => sum + e.totalCost, 0).toLocaleString()} (${((estimates[0].equipmentCosts.reduce((sum, e) => sum + e.totalCost, 0) / estimates[0].totalCost) * 100).toFixed(1)}%)
- **Overhead:** $${estimates[0].overheadCosts.reduce((sum, o) => sum + o.amount, 0).toLocaleString()} (${((estimates[0].overheadCosts.reduce((sum, o) => sum + o.amount, 0) / estimates[0].totalCost) * 100).toFixed(1)}%)
` : ""}

---
*Report generated by 2CM SmartBuild AI-powered construction planning system*
`;

    return reportContent;
  }

  async generateRiskAnalysisReport(data: ReportData): Promise<string> {
    const latestRiskAssessment = data.riskAssessments.length > 0 ? data.riskAssessments[0] : null;

    if (!latestRiskAssessment) {
      return `
# Risk Analysis Report

**Project:** ${data.project.name}
**Generated:** ${data.generatedAt.toLocaleDateString()}

No risk assessments available for this project.

---
*Report generated by 2CM SmartBuild AI-powered construction planning system*
`;
    }

    const reportContent = `
# Risk Analysis Report

**Project:** ${data.project.name}
**Generated:** ${data.generatedAt.toLocaleDateString()}

## Overall Risk Assessment
- **Risk Score:** ${latestRiskAssessment.overallRiskScore}/100
- **Risk Level:** ${latestRiskAssessment.overallRiskScore < 30 ? "Low Risk" : latestRiskAssessment.overallRiskScore < 70 ? "Medium Risk" : "High Risk"}
- **Total Risks Identified:** ${latestRiskAssessment.risks.length}
- **Assessment Date:** ${latestRiskAssessment.updatedAt.toLocaleDateString()}

## Risk Breakdown by Category
${Object.entries(
  latestRiskAssessment.risks.reduce((acc, risk) => {
    if (!acc[risk.category]) acc[risk.category] = [];
    acc[risk.category].push(risk);
    return acc;
  }, {} as Record<string, typeof latestRiskAssessment.risks>)
).map(([category, risks]) => `
### ${category.replace("_", " ").toUpperCase()}
${risks.map(risk => `
- **Risk:** ${risk.description}
- **Probability:** ${risk.probability}% | **Impact:** ${risk.impact}% | **Score:** ${risk.riskScore}
- **Status:** ${risk.status.replace("_", " ").toUpperCase()}
- **Mitigation:** ${risk.mitigation}
`).join("")}
`).join("")}

## Risk Mitigation Recommendations
${latestRiskAssessment.recommendations.map((rec, index) => `${index + 1}. ${rec}`).join("\n")}

## Risk Matrix
**High Impact, High Probability:**
${latestRiskAssessment.risks.filter(r => r.probability >= 70 && r.impact >= 70).map(r => `- ${r.description} (Score: ${r.riskScore})`).join("\n") || "None"}

**High Impact, Low Probability:**
${latestRiskAssessment.risks.filter(r => r.probability < 70 && r.impact >= 70).map(r => `- ${r.description} (Score: ${r.riskScore})`).join("\n") || "None"}

**Low Impact, High Probability:**
${latestRiskAssessment.risks.filter(r => r.probability >= 70 && r.impact < 70).map(r => `- ${r.description} (Score: ${r.riskScore})`).join("\n") || "None"}

---
*Report generated by 2CM SmartBuild AI-powered construction planning system*
`;

    return reportContent;
  }

  async exportToCSV(data: ReportData): Promise<string> {
    const latestEstimate = data.estimates.length > 0 ? data.estimates[0] : null;
    const latestRiskAssessment = data.riskAssessments.length > 0 ? data.riskAssessments[0] : null;

    let csvContent = "Category,Item,Value,Notes\n";
    
    // Project basic info
    csvContent += `Project,Name,${data.project.name},\n`;
    csvContent += `Project,Type,${data.project.type},\n`;
    csvContent += `Project,Location,${data.project.location},\n`;
    csvContent += `Project,Status,${data.project.status},\n`;
    csvContent += `Project,Start Date,${data.project.startDate.toISOString()},\n`;
    csvContent += `Project,Estimated End Date,${data.project.estimatedEndDate.toISOString()},\n`;
    
    // Budget info
    csvContent += `Budget,Total Budget,${data.project.budget},\n`;
    csvContent += `Budget,Estimated Cost,${data.project.estimatedCost},\n`;
    csvContent += `Budget,Actual Cost,${data.project.actualCost},\n`;
    
    // Latest estimate
    if (latestEstimate) {
      csvContent += `Estimate,Total Cost,${latestEstimate.totalCost},\n`;
      csvContent += `Estimate,Confidence,${latestEstimate.confidence}%,\n`;
      csvContent += `Estimate,Method,${latestEstimate.method},\n`;
      csvContent += `Estimate,Materials Cost,${latestEstimate.materialCosts.reduce((sum, m) => sum + m.totalCost, 0)},\n`;
      csvContent += `Estimate,Labor Cost,${latestEstimate.laborCosts.reduce((sum, l) => sum + l.totalCost, 0)},\n`;
      csvContent += `Estimate,Equipment Cost,${latestEstimate.equipmentCosts.reduce((sum, e) => sum + e.totalCost, 0)},\n`;
      csvContent += `Estimate,Overhead Cost,${latestEstimate.overheadCosts.reduce((sum, o) => sum + o.amount, 0)},\n`;
    }
    
    // Risk assessment
    if (latestRiskAssessment) {
      csvContent += `Risk,Overall Score,${latestRiskAssessment.overallRiskScore},\n`;
      csvContent += `Risk,Total Risks,${latestRiskAssessment.risks.length},\n`;
      
      latestRiskAssessment.risks.forEach((risk, index) => {
        csvContent += `Risk ${index + 1},Category,${risk.category},\n`;
        csvContent += `Risk ${index + 1},Description,"${risk.description.replace(/"/g, '""')}",\n`;
        csvContent += `Risk ${index + 1},Probability,${risk.probability}%,\n`;
        csvContent += `Risk ${index + 1},Impact,${risk.impact}%,\n`;
        csvContent += `Risk ${index + 1},Score,${risk.riskScore},\n`;
        csvContent += `Risk ${index + 1},Status,${risk.status},\n`;
        csvContent += `Risk ${index + 1},Mitigation,"${risk.mitigation.replace(/"/g, '""')}",\n`;
      });
    }

    return csvContent;
  }

  async captureScreenAsImage(viewRef: any): Promise<string> {
    try {
      const uri = await captureRef(viewRef, {
        format: "png",
        quality: 0.8,
      });
      return uri;
    } catch (error) {
      console.error("Screen capture failed:", error);
      throw error;
    }
  }

  async saveReportToFile(content: string, filename: string, format: "txt" | "csv" = "txt"): Promise<string> {
    try {
      const fileUri = `${FileSystem.documentDirectory}${filename}.${format}`;
      await FileSystem.writeAsStringAsync(fileUri, content);
      return fileUri;
    } catch (error) {
      console.error("File save failed:", error);
      throw error;
    }
  }

  async shareReport(fileUri: string): Promise<void> {
    try {
      if (await Sharing.isAvailableAsync()) {
        await Sharing.shareAsync(fileUri);
      } else {
        throw new Error("Sharing is not available on this device");
      }
    } catch (error) {
      console.error("Report sharing failed:", error);
      throw error;
    }
  }

  async generateAndShareProjectReport(data: ReportData, reportType: "summary" | "cost" | "risk" = "summary"): Promise<void> {
    try {
      let content: string;
      let filename: string;

      switch (reportType) {
        case "cost":
          content = await this.generateCostAnalysisReport(data);
          filename = `${data.project.name.replace(/\s+/g, "_")}_Cost_Analysis_${Date.now()}`;
          break;
        case "risk":
          content = await this.generateRiskAnalysisReport(data);
          filename = `${data.project.name.replace(/\s+/g, "_")}_Risk_Analysis_${Date.now()}`;
          break;
        default:
          content = await this.generateProjectSummaryReport(data);
          filename = `${data.project.name.replace(/\s+/g, "_")}_Summary_${Date.now()}`;
      }

      const fileUri = await this.saveReportToFile(content, filename);
      await this.shareReport(fileUri);
    } catch (error) {
      console.error("Report generation and sharing failed:", error);
      throw error;
    }
  }

  async generateAndShareCSVExport(data: ReportData): Promise<void> {
    try {
      const csvContent = await this.exportToCSV(data);
      const filename = `${data.project.name.replace(/\s+/g, "_")}_Data_Export_${Date.now()}`;
      const fileUri = await this.saveReportToFile(csvContent, filename, "csv");
      await this.shareReport(fileUri);
    } catch (error) {
      console.error("CSV export failed:", error);
      throw error;
    }
  }
}

export const reportingService = ReportingService.getInstance();